(this.webpackJsonp=this.webpackJsonp||[]).push([[8],{618:function(module,exports,__webpack_require__){eval("var api = __webpack_require__(78);\n            var content = __webpack_require__(619);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3d3dy9jb21wb25lbnQvc25hcHNob3Qvd2ViLXJ0Yy5jc3NtP2YwZGIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTEhLi93ZWItcnRjLmNzc21cIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///618\n")},619:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(79);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".web-rtc__video___1_1no {\\r\\n  display: none;\\r\\n}\\r\\n", ""]);\n// Exports\nexports.locals = {\n\t"video": "web-rtc__video___1_1no"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3d3dy9jb21wb25lbnQvc25hcHNob3Qvd2ViLXJ0Yy5jc3NtPzNmMmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi53ZWItcnRjX192aWRlb19fXzFfMW5vIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJ2aWRlb1wiOiBcIndlYi1ydGNfX3ZpZGVvX19fMV8xbm9cIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///619\n')},634:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/antd/lib/back-top/index.js\nvar back_top = __webpack_require__(434);\nvar back_top_default = /*#__PURE__*/__webpack_require__.n(back_top);\n\n// EXTERNAL MODULE: ./node_modules/antd/lib/card/index.js\nvar card = __webpack_require__(421);\nvar card_default = /*#__PURE__*/__webpack_require__.n(card);\n\n// EXTERNAL MODULE: ./node_modules/antd/lib/slider/index.js\nvar slider = __webpack_require__(620);\nvar slider_default = /*#__PURE__*/__webpack_require__.n(slider);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js\nvar slicedToArray = __webpack_require__(110);\nvar slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);\n\n// EXTERNAL MODULE: external "React"\nvar external_React_ = __webpack_require__(0);\nvar external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);\n\n// EXTERNAL MODULE: ./node_modules/react-hooks/useMediaDevices.js\nvar useMediaDevices = __webpack_require__(617);\n\n// EXTERNAL MODULE: ./src/www/component/snapshot/web-rtc.cssm\nvar web_rtc = __webpack_require__(618);\nvar web_rtc_default = /*#__PURE__*/__webpack_require__.n(web_rtc);\n\n// CONCATENATED MODULE: ./src/www/component/snapshot/web-rtc.js\n\n\n\n\nfunction WebRTC(props, ref) {\n  var video_ref = Object(external_React_["useRef"])();\n  var video_ready = Object(useMediaDevices["a" /* default */])(video_ref);\n  Object(external_React_["useEffect"])(function () {\n    if (video_ready) {\n      var video = video_ref.current;\n      props.oncanplay(video);\n    }\n  }, [video_ready]);\n  return /*#__PURE__*/external_React_default.a.createElement("video", {\n    autoPlay: true,\n    muted: true,\n    ref: video_ref,\n    className: web_rtc_default.a.video\n  });\n}\n\n/* harmony default export */ var snapshot_web_rtc = (external_React_default.a.memo(external_React_default.a.forwardRef(WebRTC)));\n// CONCATENATED MODULE: ./src/components/pico/pico.js\n/* This library is released under the MIT license, see https://github.com/tehnokv/picojs */\nvar pico = {};\n\npico.unpack_cascade = function (bytes) {\n  //\n  var dview = new DataView(new ArrayBuffer(4));\n  /*\r\n  we skip the first 8 bytes of the cascade file\r\n  (cascade version number and some data used during the learning process)\r\n  */\n\n  var p = 8;\n  /*\r\n  read the depth (size) of each tree first: a 32-bit signed integer\r\n  */\n\n  dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n  var tdepth = dview.getInt32(0, true);\n  p = p + 4;\n  /*\r\n  next, read the number of trees in the cascade: another 32-bit signed integer\r\n  */\n\n  dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n  var ntrees = dview.getInt32(0, true);\n  p = p + 4;\n  /*\r\n  read the actual trees and cascade thresholds\r\n  */\n\n  var tcodes_ls = [];\n  var tpreds_ls = [];\n  var thresh_ls = [];\n\n  for (var t = 0; t < ntrees; ++t) {\n    // read the binary tests placed in internal tree nodes\n    Array.prototype.push.apply(tcodes_ls, [0, 0, 0, 0]);\n    Array.prototype.push.apply(tcodes_ls, bytes.slice(p, p + 4 * Math.pow(2, tdepth) - 4));\n    p = p + 4 * Math.pow(2, tdepth) - 4; // read the prediction in the leaf nodes of the tree\n\n    for (var i = 0; i < Math.pow(2, tdepth); ++i) {\n      dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n      tpreds_ls.push(dview.getFloat32(0, true));\n      p = p + 4;\n    } // read the threshold\n\n\n    dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n    thresh_ls.push(dview.getFloat32(0, true));\n    p = p + 4;\n  }\n\n  var tcodes = new Int8Array(tcodes_ls);\n  var tpreds = new Float32Array(tpreds_ls);\n  var thresh = new Float32Array(thresh_ls);\n  /*\r\n  construct the classification function from the read data\r\n  */\n\n  function classify_region(r, c, s, pixels, ldim) {\n    r = 256 * r;\n    c = 256 * c;\n    var root = 0;\n    var o = 0.0;\n    var pow2tdepth = Math.pow(2, tdepth) >> 0; // \'>>0\' transforms this number to int\n\n    for (var _i = 0; _i < ntrees; ++_i) {\n      var idx = 1;\n\n      for (var j = 0; j < tdepth; ++j) {\n        // we use \'>> 8\' here to perform an integer division: this seems important for performance\n        idx = 2 * idx + (pixels[(r + tcodes[root + 4 * idx + 0] * s >> 8) * ldim + (c + tcodes[root + 4 * idx + 1] * s >> 8)] <= pixels[(r + tcodes[root + 4 * idx + 2] * s >> 8) * ldim + (c + tcodes[root + 4 * idx + 3] * s >> 8)]);\n      }\n\n      o = o + tpreds[pow2tdepth * _i + idx - pow2tdepth];\n      if (o <= thresh[_i]) return -1;\n      root += 4 * pow2tdepth;\n    }\n\n    return o - thresh[ntrees - 1];\n  }\n  /*\r\n  we\'re done\r\n  */\n\n\n  return classify_region;\n};\n\npico.run_cascade = function (image, classify_region, params) {\n  var pixels = image.pixels;\n  var nrows = image.nrows;\n  var ncols = image.ncols;\n  var ldim = image.ldim;\n  var shiftfactor = params.shiftfactor;\n  var minsize = params.minsize;\n  var maxsize = params.maxsize;\n  var scalefactor = params.scalefactor;\n  var scale = minsize;\n  var detections = [];\n\n  while (scale <= maxsize) {\n    var step = Math.max(shiftfactor * scale, 1) >> 0; // \'>>0\' transforms this number to int\n\n    var offset = scale / 2 + 1 >> 0;\n\n    for (var r = offset; r <= nrows - offset; r += step) {\n      for (var c = offset; c <= ncols - offset; c += step) {\n        var q = classify_region(r, c, scale, pixels, ldim);\n        if (q > 0.0) detections.push([r, c, scale, q]);\n      }\n    }\n\n    scale = scale * scalefactor;\n  }\n\n  return detections;\n};\n\npico.cluster_detections = function (dets, iouthreshold) {\n  /*\r\n  sort detections by their score\r\n  */\n  dets = dets.sort(function (a, b) {\n    return b[3] - a[3];\n  });\n  /*\r\n  this helper function calculates the intersection over union for two detections\r\n  */\n\n  function calculate_iou(det1, det2) {\n    // unpack the position and size of each detection\n    var r1 = det1[0],\n        c1 = det1[1],\n        s1 = det1[2];\n    var r2 = det2[0],\n        c2 = det2[1],\n        s2 = det2[2]; // calculate detection overlap in each dimension\n\n    var overr = Math.max(0, Math.min(r1 + s1 / 2, r2 + s2 / 2) - Math.max(r1 - s1 / 2, r2 - s2 / 2));\n    var overc = Math.max(0, Math.min(c1 + s1 / 2, c2 + s2 / 2) - Math.max(c1 - s1 / 2, c2 - s2 / 2)); // calculate and return IoU\n\n    return overr * overc / (s1 * s1 + s2 * s2 - overr * overc);\n  }\n  /*\r\n  do clustering through non-maximum suppression\r\n  */\n\n\n  var assignments = new Array(dets.length).fill(0);\n  var clusters = [];\n\n  for (var i = 0; i < dets.length; ++i) {\n    // is this detection assigned to a cluster?\n    if (assignments[i] == 0) {\n      // it is not:\n      // now we make a cluster out of it and see whether some other detections belong to it\n      var r = 0.0,\n          c = 0.0,\n          s = 0.0,\n          q = 0.0,\n          n = 0;\n\n      for (var j = i; j < dets.length; ++j) {\n        if (calculate_iou(dets[i], dets[j]) > iouthreshold) {\n          assignments[j] = 1;\n          r = r + dets[j][0];\n          c = c + dets[j][1];\n          s = s + dets[j][2];\n          q = q + dets[j][3];\n          n = n + 1;\n        }\n      } // make a cluster representative\n\n\n      clusters.push([r / n, c / n, s / n, q]);\n    }\n  }\n\n  return clusters;\n};\n\npico.instantiate_detection_memory = function (size) {\n  /*\r\n  initialize a circular buffer of `size` elements\r\n  */\n  var n = 0;\n  var memory = [];\n\n  for (var i = 0; i < size; ++i) {\n    memory.push([]);\n  }\n  /*\r\n  build a function that:\r\n  (1) inserts the current frame\'s detections into the buffer;\r\n  (2) merges all detections from the last `size` frames and returns them\r\n  */\n\n\n  function update_memory(dets) {\n    memory[n] = dets;\n    n = (n + 1) % memory.length;\n    dets = [];\n\n    for (var _i2 = 0; _i2 < memory.length; ++_i2) {\n      dets = dets.concat(memory[_i2]);\n    } //\n\n\n    return dets;\n  }\n  /*\r\n  we\'re done\r\n  */\n\n\n  return update_memory;\n};\n\n/* harmony default export */ var pico_pico = (pico);\n// CONCATENATED MODULE: ./src/components/pico/lploc.js\n\n\n/* This library is released under the MIT license, contact @tehnokv for more details */\nvar lploc = {};\n\nlploc.unpack_localizer = function (bytes) {\n  //\n  var dview = new DataView(new ArrayBuffer(4));\n  var p = 0;\n  /*\r\n  read the number of stages, scale multiplier (applied after each stage),\r\n  number of trees per stage and depth of each tree\r\n  */\n\n  dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n  var nstages = dview.getInt32(0, true);\n  p = p + 4;\n  dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n  var scalemul = dview.getFloat32(0, true);\n  p = p + 4;\n  dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n  var ntreesperstage = dview.getInt32(0, true);\n  p = p + 4;\n  dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n  var tdepth = dview.getInt32(0, true);\n  p = p + 4;\n  /*\r\n  unpack the trees\r\n  */\n\n  var tcodes_ls = [];\n  var tpreds_ls = [];\n\n  for (var i = 0; i < nstages; ++i) {\n    // read the trees for this stage\n    for (var j = 0; j < ntreesperstage; ++j) {\n      // binary tests (we can read all of them at once)\n      Array.prototype.push.apply(tcodes_ls, bytes.slice(p, p + 4 * Math.pow(2, tdepth) - 4));\n      p = p + 4 * Math.pow(2, tdepth) - 4; // read the prediction in the leaf nodes of the tree\n\n      for (var k = 0; k < Math.pow(2, tdepth); ++k) {\n        for (var l = 0; l < 2; ++l) {\n          dview.setUint8(0, bytes[p + 0]), dview.setUint8(1, bytes[p + 1]), dview.setUint8(2, bytes[p + 2]), dview.setUint8(3, bytes[p + 3]);\n          tpreds_ls.push(dview.getFloat32(0, true));\n          p = p + 4;\n        }\n      }\n    }\n  }\n\n  var tcodes = new Int8Array(tcodes_ls);\n  var tpreds = new Float32Array(tpreds_ls);\n  /*\r\n  construct the location estimaton function\r\n  */\n\n  function loc_fun(r, c, s, pixels, nrows, ncols, ldim) {\n    var root = 0;\n    var pow2tdepth = Math.pow(2, tdepth) >> 0; // \'>>0\' transforms this number to int\n\n    for (var _i = 0; _i < nstages; ++_i) {\n      var dr = 0.0,\n          dc = 0.0;\n\n      for (var _j = 0; _j < ntreesperstage; ++_j) {\n        var idx = 0;\n\n        for (var _k = 0; _k < tdepth; ++_k) {\n          var r1 = Math.min(nrows - 1, Math.max(0, 256 * r + tcodes[root + 4 * idx + 0] * s >> 8));\n          var c1 = Math.min(ncols - 1, Math.max(0, 256 * c + tcodes[root + 4 * idx + 1] * s >> 8));\n          var r2 = Math.min(nrows - 1, Math.max(0, 256 * r + tcodes[root + 4 * idx + 2] * s >> 8));\n          var c2 = Math.min(ncols - 1, Math.max(0, 256 * c + tcodes[root + 4 * idx + 3] * s >> 8));\n          idx = 2 * idx + 1 + (pixels[r1 * ldim + c1] > pixels[r2 * ldim + c2]);\n        }\n\n        var lutidx = 2 * (ntreesperstage * pow2tdepth * _i + pow2tdepth * _j + idx - (pow2tdepth - 1));\n        dr += tpreds[lutidx + 0];\n        dc += tpreds[lutidx + 1];\n        root += 4 * pow2tdepth - 4;\n      }\n\n      r = r + dr * s;\n      c = c + dc * s;\n      s = s * scalemul;\n    }\n\n    return [r, c];\n  }\n  /*\r\n  this function applies random perturbations to the default rectangle (r, c, s)\r\n  */\n\n\n  function loc_fun_with_perturbs(r, c, s, nperturbs, image) {\n    var rows = [],\n        cols = [];\n\n    for (var _i2 = 0; _i2 < nperturbs; ++_i2) {\n      var _s = s * (0.925 + 0.15 * Math.random());\n\n      var _r = r + s * 0.15 * (0.5 - Math.random());\n\n      var _c = c + s * 0.15 * (0.5 - Math.random());\n\n      var _loc_fun = loc_fun(_r, _c, _s, image.pixels, image.nrows, image.ncols, image.ldim);\n\n      var _loc_fun2 = slicedToArray_default()(_loc_fun, 2);\n\n      _r = _loc_fun2[0];\n      _c = _loc_fun2[1];\n      rows.push(_r);\n      cols.push(_c);\n    } // return the median along each axis\n\n\n    rows.sort();\n    cols.sort();\n    return [rows[Math.round(nperturbs / 2)], cols[Math.round(nperturbs / 2)]];\n  }\n  /*\r\n  we\'re done\r\n  */\n\n\n  return loc_fun_with_perturbs;\n};\n\n/* harmony default export */ var pico_lploc = (lploc);\n// CONCATENATED MODULE: ./src/components/pico/utility/index.js\nfunction rgba_to_grayscale(rgba, nrows, ncols) {\n  var gray = new Uint8Array(nrows * ncols);\n\n  for (var r = 0; r < nrows; ++r) {\n    for (var c = 0; c < ncols; ++c) {\n      // gray = 0.2*red + 0.7*green + 0.1*blue\n      gray[r * ncols + c] = (2 * rgba[r * 4 * ncols + 4 * c + 0] + 7 * rgba[r * 4 * ncols + 4 * c + 1] + 1 * rgba[r * 4 * ncols + 4 * c + 2]) / 10;\n    }\n  }\n\n  return gray;\n}\nfunction canvas_to_image(canvas) {\n  var img = canvas.toDataURL();\n  return img;\n}\n// CONCATENATED MODULE: ./src/www/component/snapshot/pico-detect.js\n\n\n\n\n\n\nfunction Pico(props) {\n  var video = props.video,\n      _props$score = props.score,\n      score = _props$score === void 0 ? 100 : _props$score;\n  var ctx_ref = Object(external_React_["useRef"])(null);\n  var score_ref = Object(external_React_["useRef"])(score);\n  Object(external_React_["useEffect"])(function () {\n    score_ref.current = score;\n  }, [score]);\n  Object(external_React_["useEffect"])(function () {\n    if (video) {\n      var cancel = false;\n      var ctx = ctx_ref.current.getContext("2d");\n      var update_memory = pico_pico.instantiate_detection_memory(5);\n      var fetch_puploc = fetch("./data/puploc.bin").then(function (response) {\n        return response.arrayBuffer();\n      }).then(function (buffer) {\n        return pico_lploc.unpack_localizer(new Int8Array(buffer));\n      });\n      var fetch_face = fetch("./data/facefinder").then(function (response) {\n        return response.arrayBuffer();\n      }).then(function (buffer) {\n        return pico_pico.unpack_cascade(new Int8Array(buffer));\n      });\n      var params = {\n        shiftfactor: 0.1,\n        // move the detection window by 10% of its size\n        minsize: 100,\n        // minimum size of a face\n        maxsize: 1000,\n        // maximum size of a face\n        scalefactor: 1.1 // for multiscale processing: resize the detection window by 10% when moving to the higher scale\n\n      };\n      Promise.all([fetch_face, fetch_puploc]).then(function (_ref) {\n        var _ref2 = slicedToArray_default()(_ref, 2),\n            facefinder_classify_region = _ref2[0],\n            do_puploc = _ref2[1];\n\n        function getVideoFrame() {\n          if (cancel) {\n            return;\n          }\n\n          ctx.drawImage(video, 0, 0);\n          var rgba = ctx.getImageData(0, 0, 640, 480).data;\n          var image = {\n            pixels: rgba_to_grayscale(rgba, 480, 640),\n            nrows: 480,\n            ncols: 640,\n            ldim: 640\n          };\n          var dets = pico_pico.run_cascade(image, facefinder_classify_region, params);\n          dets = update_memory(dets);\n          dets = pico_pico.cluster_detections(dets, 0.2); // set IoU threshold to 0.2\n\n          for (var i = 0; i < dets.length; ++i) {\n            if (dets[i][3] > score_ref.current) {\n              ctx.beginPath();\n              ctx.arc(dets[i][1], dets[i][0], dets[i][2] / 2, 0, 2 * Math.PI, false);\n              ctx.lineWidth = 3;\n              ctx.strokeStyle = "red";\n              ctx.stroke();\n              var r = dets[i][0] - 0.075 * dets[i][2];\n              var c = dets[i][1] - 0.175 * dets[i][2];\n              var s = 0.35 * dets[i][2];\n\n              var _do_puploc = do_puploc(r, c, s, 63, image);\n\n              var _do_puploc2 = slicedToArray_default()(_do_puploc, 2);\n\n              r = _do_puploc2[0];\n              c = _do_puploc2[1];\n\n              if (r >= 0 && c >= 0) {\n                ctx.beginPath();\n                ctx.arc(c, r, 1, 0, 2 * Math.PI, false);\n                ctx.lineWidth = 3;\n                ctx.strokeStyle = "red";\n                ctx.stroke();\n              }\n\n              r = dets[i][0] - 0.075 * dets[i][2];\n              c = dets[i][1] + 0.175 * dets[i][2];\n              s = 0.35 * dets[i][2];\n\n              var _do_puploc3 = do_puploc(r, c, s, 63, image);\n\n              var _do_puploc4 = slicedToArray_default()(_do_puploc3, 2);\n\n              r = _do_puploc4[0];\n              c = _do_puploc4[1];\n\n              if (r >= 0 && c >= 0) {\n                ctx.beginPath();\n                ctx.arc(c, r, 1, 0, 2 * Math.PI, false);\n                ctx.lineWidth = 3;\n                ctx.strokeStyle = "red";\n                ctx.stroke();\n              }\n            }\n          }\n\n          requestAnimationFrame(function () {\n            return getVideoFrame();\n          });\n        }\n\n        getVideoFrame();\n      });\n      return function () {\n        cancel = true;\n      };\n    }\n  }, [video]);\n  return /*#__PURE__*/external_React_default.a.createElement("canvas", {\n    width: 640,\n    height: 480,\n    ref: ctx_ref\n  });\n}\n\n/* harmony default export */ var pico_detect = (external_React_default.a.memo(Pico));\n// CONCATENATED MODULE: ./src/www/component/snapshot/index.js\n\n\n\n\n\n\n\n\nfunction FaceDetect() {\n  var _useState = Object(external_React_["useState"])(100),\n      _useState2 = slicedToArray_default()(_useState, 2),\n      score = _useState2[0],\n      setScore = _useState2[1];\n\n  var _useState3 = Object(external_React_["useState"])(),\n      _useState4 = slicedToArray_default()(_useState3, 2),\n      video = _useState4[0],\n      setVideo = _useState4[1];\n\n  var onAfterChange = Object(external_React_["useCallback"])(function (val) {\n    setImg([]);\n    setScore(val);\n  }, []);\n  var oncanplay = Object(external_React_["useCallback"])(function (video) {\n    setVideo(video);\n  }, []);\n  return /*#__PURE__*/external_React_default.a.createElement(external_React_default.a.Fragment, null, /*#__PURE__*/external_React_default.a.createElement(card_default.a, {\n    style: {\n      marginBottom: 24\n    }\n  }, "Accuracy:", /*#__PURE__*/external_React_default.a.createElement(slider_default.a, {\n    defaultValue: score,\n    max: 500,\n    min: 50,\n    marks: {\n      500: "500",\n      50: "50"\n    },\n    onAfterChange: onAfterChange,\n    style: {\n      width: 200\n    }\n  }), /*#__PURE__*/external_React_default.a.createElement("div", {\n    style: {\n      marginTop: 40\n    }\n  }, /*#__PURE__*/external_React_default.a.createElement(snapshot_web_rtc, {\n    oncanplay: oncanplay\n  }), /*#__PURE__*/external_React_default.a.createElement(pico_detect, {\n    video: video,\n    score: score\n  }))), /*#__PURE__*/external_React_default.a.createElement(back_top_default.a, null));\n}\n\n/* harmony default export */ var snapshot = __webpack_exports__["default"] = (external_React_default.a.memo(FaceDetect));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///634\n')}}]);